%% Import data from text file.
% Script for importing data from the following text file:
%
%    /Users/lengvall/HPC/memory/results/engvall.csv
%
% To extend the code to different selected data or a different text file,
% generate a function instead of a script.

% Auto-generated by MATLAB on 2015/01/20 19:19:12

%% Initialize variables.
addpath('./results')
filename = 'engvall.csv';
delimiter = ',';
startRow = 2;

%% Format string for each line of text:
%   column1: text (%s)
%	column2: text (%s)
%   column3: text (%s)
%	column4: double (%f)
%   column5: double (%f)
%	column6: double (%f)
%   column7: text (%s)
%	column8: double (%f)
%   column9: double (%f)
%	column10: double (%f)
%   column11: double (%f)
%	column12: double (%f)
%   column13: double (%f)
%	column14: double (%f)
%   column15: double (%f)
%	column16: double (%f)
%   column17: double (%f)
%	column18: double (%f)
%   column19: double (%f)
%	column20: double (%f)
% For more information, see the TEXTSCAN documentation.
formatSpec = '%s%s%s%f%f%f%s%f%f%f%f%f%f%f%f%f%f%f%f%f%[^\n\r]';

%% Open the text file.
fileID = fopen(filename,'r');

%% Read columns of data according to format string.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
dataArray = textscan(fileID, formatSpec, 'Delimiter', delimiter, 'HeaderLines' ,startRow-1, 'ReturnOnError', false);

%% Close the text file.
fclose(fileID);

%% Post processing for unimportable data.
% No unimportable data rules were applied during the import, so no post
% processing code is included. To generate code which works for
% unimportable data, select unimportable cells in a file and regenerate the
% script.

%% Allocate imported array to column variable names
VarName1 = dataArray{:, 1};
machinename = dataArray{:, 2};
CPUname = dataArray{:, 3};
CPUGHz = dataArray{:, 4};
CPUCores = dataArray{:, 5};
CPUCoresused = dataArray{:, 6};
PrivatecachecoreMB = dataArray{:, 7};
SharedcacheMB = dataArray{:, 8};
ArrayLengthMB = dataArray{:, 9};
PeakMBs = dataArray{:, 10};
CopyMBs = dataArray{:, 11};
ScaleMBs = dataArray{:, 12};
AddMBs = dataArray{:, 13};
TriadMBs = dataArray{:, 14};
DotMBs = dataArray{:, 15};
RevCopyMBs = dataArray{:, 16};
RevScaleMBs = dataArray{:, 17};
RevAddMBs = dataArray{:, 18};
RevTriadMBs = dataArray{:, 19};
RevDotMBs = dataArray{:, 20};


%% Clear temporary variables
clearvars filename delimiter startRow formatSpec fileID dataArray ans;

barData = [CopyMBs RevCopyMBs; ScaleMBs RevScaleMBs; AddMBs RevAddMBs; TriadMBs RevTriadMBs; DotMBs RevDotMBs];
%% 
name = {'Copy';'Scale';'Add';'Triad';'Dot'};
bar(barData)
legend('Sequential Access', 'Reverse Access')
set(gca,'xticklabel',name,'FontSize',16)

ylabel('Rate [MB/s]')
