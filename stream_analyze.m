
clc
clear 
close all
%% Import data from text file.
% Script for importing data from the following text file:
%
%    /Users/lengvall/HPC/memory/results/engvall.csv
%
% To extend the code to different selected data or a different text file,
% generate a function instead of a script.

% Auto-generated by MATLAB on 2015/01/20 19:19:12

%% Initialize variables.
addpath('./results')
filename = 'engvall.csv';
delimiter = ',';
startRow = 2;

%% Format string for each line of text:
%   column1: text (%s)
%	column2: text (%s)
%   column3: text (%s)
%	column4: double (%f)
%   column5: double (%f)
%	column6: double (%f)
%   column7: text (%s)
%	column8: double (%f)
%   column9: double (%f)
%	column10: double (%f)
%   column11: double (%f)
%	column12: double (%f)
%   column13: double (%f)
%	column14: double (%f)
%   column15: double (%f)
%	column16: double (%f)
%   column17: double (%f)
%	column18: double (%f)
%   column19: double (%f)
%	column20: double (%f)
% For more information, see the TEXTSCAN documentation.
formatSpec = '%s%s%s%f%f%f%s%f%f%f%f%f%f%f%f%f%f%f%f%f%[^\n\r]';

%% Open the text file.
fileID = fopen(filename,'r');

%% Read columns of data according to format string.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
dataArray = textscan(fileID, formatSpec, 'Delimiter', delimiter, 'HeaderLines' ,startRow-1, 'ReturnOnError', false);

%% Close the text file.
fclose(fileID);

%% Post processing for unimportable data.
% No unimportable data rules were applied during the import, so no post
% processing code is included. To generate code which works for
% unimportable data, select unimportable cells in a file and regenerate the
% script.

%% Allocate imported array to column variable names
VarName1 = dataArray{:, 1};
machinename = dataArray{:, 2};
CPUname = dataArray{:, 3};
CPUGHz = dataArray{:, 4};
CPUCores = dataArray{:, 5};
CPUCoresused = dataArray{:, 6};
PrivatecachecoreMB = dataArray{:, 7};
SharedcacheMB = dataArray{:, 8};
ArrayLengthMB = dataArray{:, 9};
PeakMBs = dataArray{:, 10};
CopyMBs = dataArray{:, 11};
ScaleMBs = dataArray{:, 12};
AddMBs = dataArray{:, 13};
TriadMBs = dataArray{:, 14};
DotMBs = dataArray{:, 15};
RevCopyMBs = dataArray{:, 16};
RevScaleMBs = dataArray{:, 17};
RevAddMBs = dataArray{:, 18};
RevTriadMBs = dataArray{:, 19};
RevDotMBs = dataArray{:, 20};


%% Clear temporary variables
clearvars filename delimiter startRow formatSpec fileID dataArray ans;

barData = [CopyMBs RevCopyMBs; ScaleMBs RevScaleMBs; AddMBs RevAddMBs; TriadMBs RevTriadMBs; DotMBs RevDotMBs];
%% 
name = {'Copy';'Scale';'Add';'Triad';'Dot'};
bar(barData)
legend('Sequential Access', 'Reverse Access')
set(gca,'xticklabel',name,'FontSize',16)

ylabel('Rate [MB/s]')

filename = 'engvalli5.csv';
delimiter = ',';
startRow = 2;

%% Format string for each line of text:
%   column1: text (%s)
%	column2: text (%s)
%   column3: text (%s)
%	column4: double (%f)
%   column5: double (%f)
%	column6: double (%f)
%   column7: text (%s)
%	column8: double (%f)
%   column9: double (%f)
%	column10: double (%f)
%   column11: double (%f)
%	column12: double (%f)
%   column13: double (%f)
%	column14: double (%f)
%   column15: double (%f)
%	column16: double (%f)
%   column17: double (%f)
%	column18: double (%f)
%   column19: double (%f)
%	column20: double (%f)
% For more information, see the TEXTSCAN documentation.
formatSpec = '%s%s%s%f%f%f%s%f%f%f%f%f%f%f%f%f%f%f%f%f%[^\n\r]';

%% Open the text file.
fileID = fopen(filename,'r');

%% Read columns of data according to format string.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.1
dataArray = textscan(fileID, formatSpec, 'Delimiter', delimiter, 'HeaderLines' ,startRow-1, 'ReturnOnError', false);

%% Close the text file.
fclose(fileID);

%% Post processing for unimportable data.
% No unimportable data rules were applied during the import, so no post
% processing code is included. To generate code which works for
% unimportable data, select unimportable cells in a file and regenerate the
% script.

%% Allocate imported array to column variable names
VarName1 = dataArray{:, 1};
machinename = dataArray{:, 2};
CPUname = dataArray{:, 3};
CPUGHz = dataArray{:, 4};
CPUCores = dataArray{:, 5};
CPUCoresused = dataArray{:, 6};
PrivatecachecoreMB = dataArray{:, 7};
SharedcacheMB = dataArray{:, 8};
ArrayLengthMB = dataArray{:, 9};
PeakMBs = dataArray{:, 10};
CopyMBs = dataArray{:, 11};
ScaleMBs = dataArray{:, 12};
AddMBs = dataArray{:, 13};
TriadMBs = dataArray{:, 14};
DotMBs = dataArray{:, 15};
RevCopyMBs = dataArray{:, 16};
RevScaleMBs = dataArray{:, 17};
RevAddMBs = dataArray{:, 18};
RevTriadMBs = dataArray{:, 19};
RevDotMBs = dataArray{:, 20};


%% Clear temporary variables
clearvars filename delimiter startRow formatSpec fileID dataArray ans;

barData = [CopyMBs RevCopyMBs; ScaleMBs RevScaleMBs; AddMBs RevAddMBs; TriadMBs RevTriadMBs; DotMBs RevDotMBs];
%% 
figure
name = {'Copy';'Scale';'Add';'Triad';'Dot'};
bar(barData)
legend('Sequential Access', 'Reverse Access')
set(gca,'xticklabel',name,'FontSize',16)

ylabel('Rate [MB/s]')

%% Import data from text file.
% Script for importing data from the following text file:
%
%    /home/lengvall/HPC/memory/results/engvall2.csv
%
% To extend the code to different selected data or a different text file,
% generate a function instead of a script.

% Auto-generated by MATLAB on 2015/01/23 20:15:02

%% Initialize variables.
filename = './results/engvall2.csv';
delimiter = ',';
startRow = 2;

%% Read columns of data as strings:
% For more information, see the TEXTSCAN documentation.
formatSpec = '%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%[^\n\r]';

%% Open the text file.
fileID = fopen(filename,'r');

%% Read columns of data according to format string.
% This call is based on the structure of the file used to generate this code. If
% an error occurs for a different file, try regenerating the code from the
% Import Tool.
dataArray = textscan(fileID, formatSpec, 'Delimiter', delimiter, 'HeaderLines' ,startRow-1, 'ReturnOnError', false);

%% Close the text file.
fclose(fileID);

%% Convert the contents of columns containing numeric strings to numbers.
% Replace non-numeric strings with NaN.
raw = repmat({''},length(dataArray{1}),length(dataArray)-1);
for col=1:length(dataArray)-1
    raw(1:length(dataArray{col}),col) = dataArray{col};
end
numericData = NaN(size(dataArray{1},1),size(dataArray,2));

for col=[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]
    % Converts strings in the input cell array to numbers. Replaced non-numeric
    % strings with NaN.
    rawData = dataArray{col};
    for row=1:size(rawData, 1);
        % Create a regular expression to detect and remove non-numeric prefixes and
        % suffixes.
        regexstr = '(?<prefix>.*?)(?<numbers>([-]*(\d+[\,]*)+[\.]{0,1}\d*[eEdD]{0,1}[-+]*\d*[i]{0,1})|([-]*(\d+[\,]*)*[\.]{1,1}\d+[eEdD]{0,1}[-+]*\d*[i]{0,1}))(?<suffix>.*)';
        try
            result = regexp(rawData{row}, regexstr, 'names');
            numbers = result.numbers;
            
            % Detected commas in non-thousand locations.
            invalidThousandsSeparator = false;
            if any(numbers==',');
                thousandsRegExp = '^\d+?(\,\d{3})*\.{0,1}\d*$';
                if isempty(regexp(thousandsRegExp, ',', 'once'));
                    numbers = NaN;
                    invalidThousandsSeparator = true;
                end
            end
            % Convert numeric strings to numbers.
            if ~invalidThousandsSeparator;
                numbers = textscan(strrep(numbers, ',', ''), '%f');
                numericData(row, col) = numbers{1};
                raw{row, col} = numbers{1};
            end
        catch me
        end
    end
end


%% Replace non-numeric cells with NaN
R = cellfun(@(x) ~isnumeric(x) && ~islogical(x),raw); % Find non-numeric cells
raw(R) = {NaN}; % Replace non-numeric cells

%% Create output variable
engvall2 = cell2mat(raw);
%% Clear temporary variables
clearvars filename delimiter startRow formatSpec fileID dataArray ans raw col numericData rawData row regexstr result numbers invalidThousandsSeparator thousandsRegExp me R;


%% PLotting the results.
figure
plot([1 5 10 25 50 100],engvall2(:,11:15))
legend('Copy', 'Scale', 'Add','Triad','Dot')
set(gca,'FontSize',16)
xlabel('Block Size')
ylabel('Peak Rate Mb/s')
title('Peak Rate vs. Block size for a 10,000,000 element array')




%% Initialize variables.
filename = './results/engvall3.csv';
delimiter = ',';
startRow = 2;

%% Read columns of data as strings:
% For more information, see the TEXTSCAN documentation.
formatSpec = '%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%[^\n\r]';

%% Open the text file.
fileID = fopen(filename,'r');

%% Read columns of data according to format string.
% This call is based on the structure of the file used to generate this code. If
% an error occurs for a different file, try regenerating the code from the
% Import Tool.
dataArray = textscan(fileID, formatSpec, 'Delimiter', delimiter, 'HeaderLines' ,startRow-1, 'ReturnOnError', false);

%% Close the text file.
fclose(fileID);

%% Convert the contents of columns containing numeric strings to numbers.
% Replace non-numeric strings with NaN.
raw = repmat({''},length(dataArray{1}),length(dataArray)-1);
for col=1:length(dataArray)-1
    raw(1:length(dataArray{col}),col) = dataArray{col};
end
numericData = NaN(size(dataArray{1},1),size(dataArray,2));

for col=[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]
    % Converts strings in the input cell array to numbers. Replaced non-numeric
    % strings with NaN.
    rawData = dataArray{col};
    for row=1:size(rawData, 1);
        % Create a regular expression to detect and remove non-numeric prefixes and
        % suffixes.
        regexstr = '(?<prefix>.*?)(?<numbers>([-]*(\d+[\,]*)+[\.]{0,1}\d*[eEdD]{0,1}[-+]*\d*[i]{0,1})|([-]*(\d+[\,]*)*[\.]{1,1}\d+[eEdD]{0,1}[-+]*\d*[i]{0,1}))(?<suffix>.*)';
        try
            result = regexp(rawData{row}, regexstr, 'names');
            numbers = result.numbers;
            
            % Detected commas in non-thousand locations.
            invalidThousandsSeparator = false;
            if any(numbers==',');
                thousandsRegExp = '^\d+?(\,\d{3})*\.{0,1}\d*$';
                if isempty(regexp(thousandsRegExp, ',', 'once'));
                    numbers = NaN;
                    invalidThousandsSeparator = true;
                end
            end
            % Convert numeric strings to numbers.
            if ~invalidThousandsSeparator;
                numbers = textscan(strrep(numbers, ',', ''), '%f');
                numericData(row, col) = numbers{1};
                raw{row, col} = numbers{1};
            end
        catch me
        end
    end
end


%% Replace non-numeric cells with NaN
R = cellfun(@(x) ~isnumeric(x) && ~islogical(x),raw); % Find non-numeric cells
raw(R) = {NaN}; % Replace non-numeric cells

%% Create output variable
engvall2 = cell2mat(raw);
%% Clear temporary variables
clearvars filename delimiter startRow formatSpec fileID dataArray ans raw col numericData rawData row regexstr result numbers invalidThousandsSeparator thousandsRegExp me R;


%% PLotting the results.
figure
plot([5000000, 10000000, 50000000,100000000, 1000000000, 10000000000],engvall2(:,11:15))
legend('Copy', 'Scale', 'Add','Triad','Dot')
set(gca,'FontSize',16)
xlabel('Array Size')
ylabel('Peak Rate Mb/s')
title('Peak Rate vs.Array Size for a 100 element block')
